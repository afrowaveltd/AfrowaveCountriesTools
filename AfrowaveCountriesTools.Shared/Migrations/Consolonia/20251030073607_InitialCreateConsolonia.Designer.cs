// <auto-generated />
using AfrowaveCountriesTools.Shared.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AfrowaveCountriesTools.Shared.Migrations.Consolonia
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251030073607_InitialCreateConsolonia")]
    partial class InitialCreateConsolonia
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "10.0.0-rc.2.25502.107");

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Area")
                        .HasColumnType("REAL");

                    b.Property<string>("Cca2")
                        .HasMaxLength(2)
                        .HasColumnType("TEXT");

                    b.Property<string>("Cca3")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<string>("Ccn3")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<string>("Cioc")
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.Property<string>("DialCode")
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.Property<string>("FlagEmoji")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Independent")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Landlocked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<string>("Subregion")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool?>("UnMember")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.CountryAltSpelling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryAltSpellings", (string)null);
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.CountryBorder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryBorders", (string)null);
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.CountryCallingCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryCallingCodes", (string)null);
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.CountryCapital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryCapitals", (string)null);
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.CountryCoordinate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Latitude")
                        .HasColumnType("REAL");

                    b.Property<double>("Longitude")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryCoordinates", (string)null);
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.CountryCurrency", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RawCode")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.HasKey("CountryId", "CurrencyId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("CountryCurrencies", (string)null);
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.CountryDemonym", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Female")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("LangCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Male")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryDemonyms", (string)null);
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.CountryLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryLanguages", (string)null);
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.CountryNameEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Common")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Official")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.ToTable("CountryNames", (string)null);
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.CountryTld", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTlds", (string)null);
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.CountryTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Common")
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LangCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Official")
                        .HasMaxLength(300)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CountryTranslations", (string)null);
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Currencies", (string)null);
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.FlagEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Alt")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Base64")
                        .HasColumnType("TEXT");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Png")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Svg")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.ToTable("Flags", (string)null);
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.IddInfoEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Root")
                        .HasMaxLength(8)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.ToTable("IddInfos", (string)null);
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.IddSuffix", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IddInfoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("IddInfoId");

                    b.ToTable("IddSuffixes", (string)null);
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.CountryAltSpelling", b =>
                {
                    b.HasOne("AfrowaveCountriesTools.Shared.Models.Entities.Country", "Country")
                        .WithMany("AltSpellings")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.CountryBorder", b =>
                {
                    b.HasOne("AfrowaveCountriesTools.Shared.Models.Entities.Country", "Country")
                        .WithMany("Borders")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.CountryCallingCode", b =>
                {
                    b.HasOne("AfrowaveCountriesTools.Shared.Models.Entities.Country", "Country")
                        .WithMany("CallingCodes")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.CountryCapital", b =>
                {
                    b.HasOne("AfrowaveCountriesTools.Shared.Models.Entities.Country", "Country")
                        .WithMany("Capitals")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.CountryCoordinate", b =>
                {
                    b.HasOne("AfrowaveCountriesTools.Shared.Models.Entities.Country", "Country")
                        .WithMany("Coordinates")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.CountryCurrency", b =>
                {
                    b.HasOne("AfrowaveCountriesTools.Shared.Models.Entities.Country", "Country")
                        .WithMany("CountryCurrencies")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AfrowaveCountriesTools.Shared.Models.Entities.Currency", "Currency")
                        .WithMany("CountryCurrencies")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.CountryDemonym", b =>
                {
                    b.HasOne("AfrowaveCountriesTools.Shared.Models.Entities.Country", "Country")
                        .WithMany("Demonyms")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.CountryLanguage", b =>
                {
                    b.HasOne("AfrowaveCountriesTools.Shared.Models.Entities.Country", "Country")
                        .WithMany("Languages")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.CountryNameEntity", b =>
                {
                    b.HasOne("AfrowaveCountriesTools.Shared.Models.Entities.Country", "Country")
                        .WithOne("Name")
                        .HasForeignKey("AfrowaveCountriesTools.Shared.Models.Entities.CountryNameEntity", "CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.CountryTld", b =>
                {
                    b.HasOne("AfrowaveCountriesTools.Shared.Models.Entities.Country", "Country")
                        .WithMany("Tlds")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.CountryTranslation", b =>
                {
                    b.HasOne("AfrowaveCountriesTools.Shared.Models.Entities.Country", "Country")
                        .WithMany("Translations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.FlagEntity", b =>
                {
                    b.HasOne("AfrowaveCountriesTools.Shared.Models.Entities.Country", "Country")
                        .WithOne("Flags")
                        .HasForeignKey("AfrowaveCountriesTools.Shared.Models.Entities.FlagEntity", "CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.IddInfoEntity", b =>
                {
                    b.HasOne("AfrowaveCountriesTools.Shared.Models.Entities.Country", "Country")
                        .WithOne("Idd")
                        .HasForeignKey("AfrowaveCountriesTools.Shared.Models.Entities.IddInfoEntity", "CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.IddSuffix", b =>
                {
                    b.HasOne("AfrowaveCountriesTools.Shared.Models.Entities.IddInfoEntity", "IddInfo")
                        .WithMany()
                        .HasForeignKey("IddInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IddInfo");
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.Country", b =>
                {
                    b.Navigation("AltSpellings");

                    b.Navigation("Borders");

                    b.Navigation("CallingCodes");

                    b.Navigation("Capitals");

                    b.Navigation("Coordinates");

                    b.Navigation("CountryCurrencies");

                    b.Navigation("Demonyms");

                    b.Navigation("Flags");

                    b.Navigation("Idd");

                    b.Navigation("Languages");

                    b.Navigation("Name");

                    b.Navigation("Tlds");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("AfrowaveCountriesTools.Shared.Models.Entities.Currency", b =>
                {
                    b.Navigation("CountryCurrencies");
                });
#pragma warning restore 612, 618
        }
    }
}
